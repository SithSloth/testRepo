{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"app/repository-service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nconst _c0 = function (a0) {\n  return [a0];\n};\nfunction EventComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const party_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(2, _c0, \"app-event-details/\" + party_r1.eventID));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(party_r1.name);\n  }\n}\nexport class EventComponent {\n  constructor(repositoryService) {\n    this.repositoryService = repositoryService;\n    this.eventID = 0;\n    this.name = \"\";\n    this.description = \"\";\n    this.price = 0.00;\n    this.location = \"\";\n    this.date = \"2/27/2023\";\n  }\n  ngOnInit() {\n    this.repositoryService.getEvents().subscribe(response => {\n      this.events = response;\n    });\n  }\n  addEvent(form) {\n    let newEvent = {\n      eventID: -1,\n      name: form.form.value.name,\n      description: form.form.value.description,\n      date: form.form.value.date,\n      location: form.form.value.location,\n      price: form.form.value.price\n    };\n    this.repositoryService.addEvent(newEvent).subscribe(() => {\n      this.repositoryService.getEvents();\n    });\n  }\n  getEvents(id) {\n    this.repositoryService.getEventDetails(id);\n  }\n}\nEventComponent.ɵfac = function EventComponent_Factory(t) {\n  return new (t || EventComponent)(i0.ɵɵdirectiveInject(i1.RepositoryService));\n};\nEventComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EventComponent,\n  selectors: [[\"app-event\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"onclick\", \"getDeets(party.eventID)\", \"routerLinkActive\", \"active\", \"ariaCurrentWhenActive\", \"page\", 3, \"routerLink\"]],\n  template: function EventComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n      i0.ɵɵtext(2, \"Event List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, EventComponent_div_3_Template, 3, 4, \"div\", 0);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.events);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.RouterLink, i3.RouterLinkActive],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;IAEEA,2BAAkC;IACmHA,YAAc;IAAAA,iBAAI;;;;IAA9HA,eAAoD;IAApDA,gGAAoD;IAAwDA,eAAc;IAAdA,mCAAc;;;ACOrK,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,iBAAoC;IAApC,sBAAiB,GAAjBA,iBAAiB;IAErC,YAAO,GAAW,CAAC;IACnB,SAAI,GAAS,EAAE;IACf,gBAAW,GAAW,EAAE;IACxB,UAAK,GAAW,IAAI;IACpB,aAAQ,GAAW,EAAE;IACrB,SAAI,GAAW,WAAW;EAPkC;EAS5DC,QAAQ;IACN,IAAI,CAACD,iBAAiB,CAACE,SAAS,EAAE,CAACC,SAAS,CACzCC,QAAQ,IAAI;MACX,IAAI,CAACC,MAAM,GAAGD,QAAQ;IACxB,CAAC,CAAC;EAEN;EAEAE,QAAQ,CAACC,IAAW;IAClB,IAAIC,QAAQ,GAAY;MACtBC,OAAO,EAAE,CAAC,CAAC;MACXC,IAAI,EAAEH,IAAI,CAACA,IAAI,CAACI,KAAK,CAACD,IAAI;MAC1BE,WAAW,EAAGL,IAAI,CAACA,IAAI,CAACI,KAAK,CAACC,WAAW;MACzCC,IAAI,EAAEN,IAAI,CAACA,IAAI,CAACI,KAAK,CAACE,IAAI;MAC1BC,QAAQ,EAAEP,IAAI,CAACA,IAAI,CAACI,KAAK,CAACG,QAAQ;MAClCC,KAAK,EAAER,IAAI,CAACA,IAAI,CAACI,KAAK,CAACI;KAGxB;IAED,IAAI,CAACf,iBAAiB,CAACM,QAAQ,CAACE,QAAQ,CAAC,CAACL,SAAS,CACjD,MAAK;MACH,IAAI,CAACH,iBAAiB,CAACE,SAAS,EAAE;IACpC,CAAC,CAAC;EAGN;EAEAA,SAAS,CAACc,EAAU;IAElB,IAAI,CAAChB,iBAAiB,CAACiB,eAAe,CAACD,EAAE,CAAC;EAC5C;;AA3CWlB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDV3BzB,2BAAK;MACCA,0BAAU;MAAAA,iBAAK;MACnBA,+DAGM;MACRA,iBAAM;;;MAJmBA,eAAS;MAATA,oCAAS","names":["i0","EventComponent","constructor","repositoryService","ngOnInit","getEvents","subscribe","response","events","addEvent","form","newEvent","eventID","name","value","description","date","location","price","id","getEventDetails","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\rizzo\\Desktop\\repos\\New folder\\UpmeetEventSystem\\src\\app\\event\\event.component.html","C:\\Users\\rizzo\\Desktop\\repos\\New folder\\UpmeetEventSystem\\src\\app\\event\\event.component.ts"],"sourcesContent":["<div>\n  <h3>Event List</h3>\n  <div *ngFor=\"let party of events\">\n      <a onclick=\"getDeets(party.eventID)\" [routerLink]=\"['app-event-details/' +party.eventID]\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">{{party.name}}</a>\n      <!-- <app-event-details index={{party.eventId}}></app-event-details> -->\n  </div>\n</div>\n\n<!-- <div>\n  <h3>Classes</h3>\n  <div *ngFor=\"let class of characterClasses.results\">\n      <h3>{{class.index | uppercase}}</h3>\n      <app-character-class-details index={{class.index}}></app-character-class-details>\n  </div>\n</div> -->\n\n\n<!-- <form #newEventForm=\"ngForm\" (ngSubmit)=\"addEvent(newEventForm)\">\n  <p><label for=\"name\">Event Name:</label> <input name=\"name\" id=\"name\" ngModel /> </p>\n  <p> <label for=\"description\">Description:</label> <input name=\"description\" id=\"description\" ngModel /></p>\n  <p> <label for=\"date\">Date of Event:</label> <input name=\"date\" id=\"date\" ngModel /></p>\n  <p> <label for=\"location\">Location:</label> <input name=\"location\" id=\"location\" ngModel /></p>\n  <p> <label for=\"price\">Price:</label> <input name=\"price\" id=\"price\" ngModel /></p>\n  <p><button (click)=\"addEvent(newEventForm)\">Add New Event</button></p>\n  </form> -->\n","import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { IEvent } from 'app/interfaces/event';\nimport { RepositoryService } from 'app/repository-service';\n\n@Component({\n  selector: 'app-event',\n  templateUrl: './event.component.html',\n  styleUrls: ['./event.component.css']\n})\nexport class EventComponent {\n\n  \n  constructor(private repositoryService: RepositoryService) { }\n  events: any;\n  eventID: number = 0;\n  name: string=\"\";\n  description: string = \"\";\n  price: number = 0.00;\n  location: string = \"\";\n  date: string = \"2/27/2023\"\n\n  ngOnInit(): void {\n    this.repositoryService.getEvents().subscribe(\n      (response) => {\n        this.events = response; \n      });\n    \n  };\n\n  addEvent(form:NgForm) {\n    let newEvent : IEvent = {\n      eventID: -1,\n      name: form.form.value.name,\n      description : form.form.value.description,\n      date: form.form.value.date,\n      location: form.form.value.location,\n      price: form.form.value.price\n\n      \n    }\n\n    this.repositoryService.addEvent(newEvent).subscribe(\n      () => {\n        this.repositoryService.getEvents();\n      });\n    \n\n  }\n  \n  getEvents(id: number){\n    \n    this.repositoryService.getEventDetails(id)\n  }\n  // getEvents() {\n  //   this.repositoryService.getEvents().subscribe(\n  //     (response) => {\n  //       this.events = response;\n  //     });\n  // }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}